// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apointment {
  id                    String   @id @default(uuid())
  name                  String
  email                 String
  phone                 String
  apointmentDate        DateTime
  time                  String

  serviceId             String
  service               Service  @relation(fields: [serviceId], references: [id])

  userId                String
  user                  User @relation(fields: [userId], references: [id])

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Reminder {
  id          String   @id @default(uuid())
  description String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Int
  duration    Int      // Duration in minutes
  status      Boolean  @default(true)

  apointments Apointment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User @relation(fields: [userId], references: [id])
}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription {
  id              String   @id @default(cuid())
  status          String
  plan            Plan
  priceId         String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId          String   @unique  
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  adress            String?
  phone             String?
  status            Boolean         @default(true)
  timezone          String?         @default("America/Sao_Paulo")
  stripeCustomerId  String?
  times             String[]        @default([])

  subscription      Subscription?
  services          Service[]
  reminders         Reminder[]
  apointments       Apointment[]

  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

